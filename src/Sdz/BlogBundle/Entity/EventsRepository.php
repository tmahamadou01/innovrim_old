<?php

namespace Sdz\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * EventsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventsRepository extends EntityRepository
{
	public function getSelectList()
	{
		$qb = $this->createQueryBuilder('e')->where('e.publication = 1'); // On filtre sur l'attribut publication
		// Et on retourne simplement le QueryBuilder, et non la Query, attention
		return $qb;
	}

	public function getEvents($nombreParPage, $page)
	{
		if ($page < 1) {
			throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
		}

		// On déplace la vérification du numéro de page dans cette méthode
		$query = $this->createQueryBuilder('e')
		// On joint sur l'attribut image
					  ->leftJoin('e.imageEvents', 'i')
					  ->addSelect('i')
        // On joint sur l'attribut categories
					  ->leftJoin('e.categories', 'cat')
					  ->addSelect('cat')
			          ->orderBy('e.date', 'DESC')
                      ->getQuery();
        
		// On définit l'event à partir duquel commencer la liste
		$query->setFirstResult(($page-1) * $nombreParPage)
		// Ainsi que le nombre d'events à afficher
			  ->setMaxResults($nombreParPage);             
		return new Paginator($query);
	}
}
